---------------------------------------------------------- 240829목 ---------------------------------------------------------

-- 직종이 'IT_PROG'인 사람들의 평균급여
SELECT AVG(SALARY) FROM EMPLOYEES
WHERE JOB_ID = 'IT_PROG';

SELECT AVG(CASE JOB_ID WHEN 'IT_PROG' THEN SALARY END)
FROM EMPLOYEES;

-- CASE와 WHEN 사이에 비교하고자 하는 컬럼을 넣고
-- WHEN과 THEN 사이에 비교하고자 하는 값을 넣어서 비교하는 방법

-- EMP 테이블에서 SAL이 3000이 이상이면 HIGH, 1000이상이면 MID
-- 둘 다 아니면 LOW를 사원명(ENAME), 급여(SAL), 등급(GRADE)순으로
-- 조회하세요.
SELECT ENAME, SAL,
CASE
	WHEN SAL >= 3000 THEN 'HIGH'
	WHEN SAL >= 1000 THEN 'MID'
	ELSE 'LOW'
END AS GRADE
FROM EMP;

SELECT * FROM EMP;

-- STADIUM테이블에서 SEAT_COUNT(좌석수)가 0이상 30000이하면 'S'
-- 30001이상 50000이하면 'M' 다 아니면 'L'을
-- 경기장 이름, 좌석수, 크기순으로 조회
SELECT STADIUM_NAME, SEAT_COUNT, 
CASE 
	WHEN SEAT_COUNT BETWEEN 0 AND 30000 THEN 'S'
	WHEN SEAT_COUNT BETWEEN 30001 AND 50000 THEN 'M'
	ELSE 'L'
END AS "SIZE"
FROM STADIUM;

SELECT STADIUM_NAME, SEAT_COUNT,
CASE 
	WHEN SEAT_COUNT BETWEEN 0 AND 30000 THEN 'S'
	-- CASE문의 중첩이 가능하다.
	ELSE CASE 
		WHEN SEAT_COUNT BETWEEN 30001 AND 50000 THEN 'M'
		ELSE 'L'
	END
END AS "SIZE"
FROM STADIUM;

-- PLAYER테이블에서 WEIGHT가 50이상 70이하면 'L'
-- 71이상 80이하면 'M' NULL이면 '미등록'
-- 이외에는 'H'를 선수이름, 몸무게(단위붙이기), 크기순으로 조회
SELECT * FROM PLAYER p ;
SELECT PLAYER_NAME, WEIGHT, 
CASE
	WHEN WEIGHT BETWEEN 50 AND 70 THEN 'L'
	WHEN WEIGHT BETWEEN 71 AND 80 THEN 'M'
	WHEN WEIGHT IS NULL THEN '미등록'
	ELSE 'H'
END AS 체급
FROM PLAYER;

-- 오라클에서 콘솔로 데이터를 확인하는 법
DBMS_OUTPUT.PUT_LINE('출력할 내용');

-- 변수의 선언
DECLARE
NAME VARCHAR2(20) := '홍길동';
AGE NUMBER(3) := 30;
BEGIN
	DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME || CHR(10) || '나이 : ' || AGE);
END;

-- 점수에 맞는 학점 출력하기
-- 변수
-- SCORE변수에는 80점 대입
-- GRADE
-- 90점 이상이면 A
-- 80점 이상이면 B
-- 70점 이상이면 C
-- 60점 이상이면 D
-- 그 이하는 F
-- 당신의 점수 : XX점
-- 학점 : B
DECLARE
SCORE NUMBER := 80;
GRADE VARCHAR2(20);
BEGIN
	IF SCORE >= 90 THEN GRADE := 'A';
	ELSIF SCORE >= 90 THEN GRADE := 'B';
	ELSIF SCORE >= 90 THEN GRADE := 'C';
	ELSIF SCORE >= 90 THEN GRADE := 'D';
	ELSE GRADE := 'F';
	END IF;
DBMS_OUTPUT.PUT_LINE('당신의 점수 : ' || SCORE || '점' || CHR(10) || '학점 : ' || GRADE);
END;

DECLARE
BEGIN
	FOR I IN 1..4 LOOP
		IF MOD(I,2) = 0 THEN
		DBMS_OUTPUT.PUT_LINE(I||'는 짝수!');
		ELSE
		DBMS_OUTPUT.PUT_LINE(I||'는 홀수!');
		END IF;
	END LOOP;
END;

-- NUM1 변수 선언, 1을 대입
-- WHILE문으로 1부터 10까지의 총합을 출력하세요.
DECLARE
BEGIN
	NUM1 NUMBER := 1;
	TOTAL NUMBER;
BEGIN
	WHILE(NUM1 <= 10)
	LOOP
		TOTAL := NUM1 + 1;
	END LOOP;
	DBMS_OUTPUT.PUT_LINE(TOTAL);
END;

-- F(X) = 2X + 1;
-- 프로시저명 F
-- 매개변수 X
-- 출력결과 X : 값, Y : 값
-- 프로시저 전체 드래그 후 실행
CREATE OR REPLACE PROCEDURE F(X NUMBER)
IS
	Y NUMBER;
BEGIN
	Y := 2*X + 1;
	DBMS_OUTPUT.PUT_LINE('X : ' || X || ', Y : ' || Y);
END;

DROP PROCEDURE F;

CALL F(2);

SELECT * FROM JOBS;
-- JOB_ID
-- JOB_TITLE
-- MIN_SALARY
-- MAX_SALARY

-- 프로시저명 : MY_NEW_JOB_PROC
-- 호출했을 때 4개의 값을 전달받아서 JOBS에 INSERT를 할것이다.
CREATE OR REPLACE PROCEDURE MY_NEW_JOB_PROC(
P_JOB_ID IN JOBS.JOB_ID%TYPE,
P_JOB_TITLE IN JOBS.JOB_TITLE%TYPE,
P_MIN_SALARY IN JOBS.MIN_SALARY%TYPE,
P_MAX_SALARY IN JOBS.MAX_SALARY%TYPE
)
IS 
	CNT NUMBER := 0;
BEGIN 
	-- 1. JOBS 테이블에 매개변수로 받은 JOB_ID가 존재하는지 개수를 세는 쿼리문 작성하기
	-- 쿼리문을 통해 나온 결과를 CNT변수에 대입하겠다.
	SELECT COUNT(JOB_ID) INTO CNT FROM JOBS
	WHERE JOB_ID = P_JOB_ID;
	-- 2. CNT가 0일 때는 INSERT하고, 1이면 UPDATE하기
	IF CNT != 0 THEN
	UPDATE JOBS SET 
		JOB_TITLE = P_JOB_TITLE,
		MIN_SALARY = P_MIN_SALARY,
		MAX_SALARY = P_MAX_SALARY
		WHERE JOB_ID = P_JOB_ID;
		DBMS_OUTPUT.PUT_LINE('ALL DONE ABOUT' || P_JOB_ID);
	ELSE
	-- INSERT문 작성하기
		INSERT INTO JOBS (JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY)
		VALUES(P_JOB_ID, P_JOB_TITLE, P_MIN_SALARY, P_MAX_SALARY);
		DBMS_OUTPUT.PUT_LINE('ALL DONE ABOUT' || P_JOB_ID);
	END IF;
END;

DROP PROCEDURE MY_NEW_JOB_PROC;

CALL MY_NEW_JOB_PROC('A', 'B', 11, 13);

-- INSERT기능을 하는 프로시저에서 PK제약조건으로 인해 겹칠 때가 있다.
-- 데이터가 겹치게 되면 오류를 내는 것이 아니라 UPDATE를 통해 내용을 수정하자.

-- 삭제를 하는 DEL_JOB_PROC만들기
-- JOB_ID에 들어가는 값은 매개변수를 통해 받는다.
CREATE OR REPLACE PROCEDURE DEL_JOB_PROC(
	P_JOB_ID IN JOBS.JOB_ID%TYPE
)
IS 
	CNT NUMBER := 0;
BEGIN
	SELECT COUNT(JOB_ID) INTO CNT FROM JOBS
	WHERE JOB_ID = P_JOB_ID;

	IF CNT != 0 THEN
		DELETE FROM JOBS j 
		WHERE JOB_ID = P_JOB_ID;
	ELSE
		DBMS_OUTPUT.PUT_LINE('삭제할 데이터가 없습니다.');
	END IF;
END;

CALL DEL_JOB_PROC('A');

SELECT * FROM JOBS;

-- 시퀀스
-- 테이블에 값을 추가할 때 자동으로 순차적인 정수값이 들어가도록 설정해주는 객체
CREATE TABLE TBL_USER(
	IDX NUMBER PRIMARY KEY,
	NAME VARCHAR2(50)
);

-- 시퀀스 생성하기
--CREATE SEQUENCE 시퀀스명;
CREATE SEQUENCE SEQ_USER;

INSERT INTO TBL_USER VALUES(SEQ_USER.NEXTVAL, '김똘똘');
INSERT INTO TBL_USER VALUES(SEQ_USER.NEXTVAL, '김맨맨');
INSERT INTO TBL_USER VALUES(SEQ_USER.NEXTVAL, '김김김');
INSERT INTO TBL_USER VALUES(SEQ_USER.NEXTVAL, '김후후');
INSERT INTO TBL_USER VALUES(SEQ_USER.NEXTVAL, '김치치');

SELECT * FROM TBL_USER;

CREATE TABLE DEPT2(
DEPTNO NUMBER(3) PRIMARY KEY,
DNAME VARCHAR2(10),
LOC VARCHAR2(5)
);

INSERT INTO DEPT2 VALUES(10, '총무부', '101');
INSERT INTO DEPT2 VALUES(20, '영업부', '202');
INSERT INTO DEPT2 VALUES(30, '전산부', '303');
INSERT INTO DEPT2 VALUES(40, '관리부', '404');
INSERT INTO DEPT2 VALUES(50, '경리부', '505');

SELECT * FROM DEPT2 ORDER BY DEPTNO ASC;










